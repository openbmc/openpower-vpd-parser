{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67a09688_bc44a899",
        "filename": "const.hpp",
        "patchSetId": 32
      },
      "lineNbr": 125,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "why these 4 constexpr are in const.hpp and others are in memory_vpd_parser.cpp?",
      "range": {
        "startLine": 120,
        "startChar": 1,
        "endLine": 125,
        "endChar": 17
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9186bd38_f04d9a1b",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 47,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "you are just declaring the byte number. such a lengthy name is not giving any meaning. you can simply declare as BYTE2, BYTE4, BYTE6..just like how they did before in line 20",
      "range": {
        "startLine": 41,
        "startChar": 22,
        "endLine": 47,
        "endChar": 56
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "225ddc86_c1c296a3",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 63,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "7th bit is reserved in Byte 234.. its not a reserved bit in number of pkg ranks per channel.\n\nplease change the name",
      "range": {
        "startLine": 63,
        "startChar": 22,
        "endLine": 63,
        "endChar": 76
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14297b4c_ac2943ae",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 177,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "there is a bug in this code. this logic doesn\u0027t give me the expected output.\n\nif I give num\u003d7,\nexpected output: even\u003d4, odd\u003d3.\noutput from this code: even\u003d4, odd\u003d4.\n\n\nbe aware that you are sending the final value of package ranks per channel (after adding 1) (line 265)",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 177,
        "endChar": 0
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195d6e12_6880183a",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 189,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "suggestion: \nsince you have many parameters to handle, it\u0027ll be easy to use tuple like data structures. use tuple to store a group of elements and pass it to functions wherever required. with tuple you can avoid copying the references for each and every variable separately.",
      "range": {
        "startLine": 188,
        "startChar": 30,
        "endLine": 189,
        "endChar": 63
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcb5c601_a2370e4e",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 189,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "can we create a tuple which stores all these values instead of creating separate variables for each and every parameter and passing everything separately.",
      "range": {
        "startLine": 188,
        "startChar": 36,
        "endLine": 189,
        "endChar": 63
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bad57569_34cd3267",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 202,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "can you specify the eeprom path, and the bad value taken from byte 6.\nalso this cerr statement looks incomplete. please correct it.",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 202,
        "endChar": 32
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a032e0ae_99893676",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 205,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "you are marking here as error occurred and you continue to calculate other parameters. and at the caller place you are just returning with size 0 if error occurred.\n\nthere is no point in calculating other params if error occurred. so please have a break/return wherever the error has been occurred.",
      "range": {
        "startLine": 204,
        "startChar": 6,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "985f58d3_cc4f9a1b",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 220,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "can you specify the eeprom path, and the bad value taken from byte 6.\nalso this cerr statement looks incomplete. please correct it wherever required.",
      "range": {
        "startLine": 218,
        "startChar": 15,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d2619e_e052d882",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 239,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "similarly you can remove this if condition check and traverse the map sdramDnstyPerDie to check if the bits are reserved or not\n\nplease make these changes wherever required.",
      "range": {
        "startLine": 232,
        "startChar": 4,
        "endLine": 239,
        "endChar": 5
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0039e60f_74c88ba2",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 291,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "this condition check is not needed as there are no reserved bit positions in bits (3~5) at byte 234. all combinations of 0s\u0027 and 1s\u0027 has some value.\n\nyou can remove this check and the const variable SPD_JEDEC_DDR5_NUM_OF_PKG_RANKS_PER_CHNL_RESERVED_BITS",
      "range": {
        "startLine": 285,
        "startChar": 4,
        "endLine": 291,
        "endChar": 5
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49e53c9d_16dbb6ac",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 333,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "lines 312 and 331 are going to give you the same output. can you make this call as a common call for both symmetric  and asymmetric.",
      "range": {
        "startLine": 331,
        "startChar": 7,
        "endLine": 333,
        "endChar": 0
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a7d2f07_e6c6f296",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 337,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "in this if else you are trying to accommodate every params for symm, asymm even and asymm odd which makes the code less readable.\n\ncan we have a separate method to calculate asymmetric odd parameters. \nand \nwhatever is common between symmetric and assymetric can be placed in another api.\n\nand you can use tuple to send and receive all the params",
      "range": {
        "startLine": 337,
        "startChar": 7,
        "endLine": 337,
        "endChar": 53
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb3e2d4_0377a4f3",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 347,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "there is no point in calculating other params if error occurred. so please have a break/return wherever the error has been occurred.",
      "range": {
        "startLine": 347,
        "startChar": 11,
        "endLine": 347,
        "endChar": 42
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "169399eb_09bc6aaa",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 368,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "since you already have a map diePerPkgMap to hold all the values, why you need to check for reserved bits? \nwhatever key is not there in the map can be considered as reserved bits and throw the error and return.",
      "range": {
        "startLine": 360,
        "startChar": 8,
        "endLine": 368,
        "endChar": 9
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec378aa4_f84f4561",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 410,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "this operation is repeative at line 405 and 410. you can calculate it once and use at both the places.",
      "range": {
        "startLine": 410,
        "startChar": 12,
        "endLine": 410,
        "endChar": 69
      },
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cff4c44c_aaaee59c",
        "filename": "vpd-parser/memory_vpd_parser.cpp",
        "patchSetId": 32
      },
      "lineNbr": 423,
      "author": {
        "id": 1000362
      },
      "writtenOn": "2023-05-02T09:11:05Z",
      "side": 1,
      "message": "can you point me to the page in spec which tells about byte 2.",
      "revId": "cea7a2ff554cc76d0de6540e81af38f3b5ab4eeb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}