{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b5ae5775_2e7afbcc",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2025-05-06T03:16:52Z",
      "side": 1,
      "message": "what happens to enableMuxChip if this fails?",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0838e649_85cbb0c1",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1001932
      },
      "writtenOn": "2025-05-06T06:42:18Z",
      "side": 1,
      "message": "enableMuxChips() has empty check for m_sysCfgJsonObj .\nwe have checks in the enableMuxChips() for the required fields to run mux related system commands, so m_sysCfgJsonObj is mandatory.",
      "parentUuid": "b5ae5775_2e7afbcc",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b4dc5d6_bcc98dd6",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1000522
      },
      "writtenOn": "2025-05-06T07:21:36Z",
      "side": 1,
      "message": "Ideally speaking, \nif m_worker is null at this point then there is some major issue with the system as worker constructor does not throw and always construct an object.\nEven then if we consider the scenario where worker instantiation fails, implies vpd-manager has no JSON loaded, in that case \"enableMuxChips\" will throw and critical PEL will be logged as code does not know which system it is running on.",
      "parentUuid": "0838e649_85cbb0c1",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebd7cd55_557aca04",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2025-05-06T08:08:11Z",
      "side": 1,
      "message": "why should we throw from enableMuxChips why can we not do it for just what it is for?\nsomething like \ntry\n{\n if (m_worker.get() !\u003d nullptr)\n {\n \tif (!dbusUtility::isChassisPowerOn())\n \t{ m_worker-\u003esetDeviceTreeAndJson();}\n \t\n \tm_sysCfgJsonObj \u003d m_worker-\u003egetSysCfgJsonObj();\n \t\n \tif (!dbusUtility::isChassisPowerOn())\n \t{ primeSystemBlueprint();}\n \t\n \tenableMuxChips();\n else\n {\n\tthrow std::runtime_error( \"Worker object not found. Can\u0027t set up device tree and Json.\");\n }\n}\ncatch\n{\n  log the error;\n}",
      "parentUuid": "0b4dc5d6_bcc98dd6",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2276ff48_70112444",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1000522
      },
      "writtenOn": "2025-05-06T09:01:38Z",
      "side": 1,
      "message": "I have some doubt in the proposed flow, system config json is read and updated by worker class and this class needs to perform oem specific jobs which needs latest system config json after initial set up. So in either case, chassis off or on, this class will have to fetch system config JSON from  worker.\n\nwe can optimise by pulling worker null check firstand then chassis off and on case.",
      "parentUuid": "ebd7cd55_557aca04",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a19e9b2a_7db600b0",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1001932
      },
      "writtenOn": "2025-05-06T11:15:27Z",
      "side": 1,
      "message": "Updated the code.",
      "parentUuid": "2276ff48_70112444",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5a20639_b763f81b",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 595,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2025-05-06T11:17:13Z",
      "side": 1,
      "message": "I thought the way it was written originally maybe m_worker-\u003esetDeviceTreeAndJson(); is required before we pull the json from the worker\nyou mean \n try\n{\nif (m_worker.get() !\u003d nullptr)\n{\n m_sysCfgJsonObj \u003d m_worker-\u003egetSysCfgJsonObj();\n}\nelse\n{\nthrow std::runtime_error( \"Worker object not found. Can\u0027t set up device tree and Json.\");\n}\n\n if (!dbusUtility::isChassisPowerOn())\n { m_worker-\u003esetDeviceTreeAndJson();\n    primeSystemBlueprint();}\n\n enableMuxChips();\n\n}\ncatch\n{\nlog the error;\n}",
      "parentUuid": "2276ff48_70112444",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24074495_c38512ee",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2025-05-06T03:16:52Z",
      "side": 1,
      "message": "why do we need the check here ?",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aea08c5_c63da33e",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1001932
      },
      "writtenOn": "2025-05-06T06:42:18Z",
      "side": 1,
      "message": "will try to get the system config JSON, even if there any exception from above code to continue with other operations, which may need the system config JSON.",
      "parentUuid": "24074495_c38512ee",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15bfc536_a01dfc62",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1000522
      },
      "writtenOn": "2025-05-06T07:21:36Z",
      "side": 1,
      "message": "I guess, @jinu.joy.thomas@in.ibm.com is concerned about the nullptr check?\nIf so, then looking at the flow, it can be skipped but it is a good practice to de-reference a pointer after check, so I am ok with the change here.",
      "parentUuid": "2aea08c5_c63da33e",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fba8fa48_979f7ecd",
        "filename": "vpd-manager/oem-handler/ibm_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2025-05-06T08:08:11Z",
      "side": 1,
      "message": "why do we even need to get the system json here, I do not see any flow which can come here directly. am I missing something",
      "parentUuid": "15bfc536_a01dfc62",
      "revId": "e4fe4268d9587556d963a255accdcaba9d699252",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}